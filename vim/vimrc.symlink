" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

" Set mapleader to comma
let mapleader = ","

set updatetime=2000 " Set the updatetime value to 2 seconds instead of 4 for more responsive scripts

" =----------------------------------------------------------------------------------= Vim Plug =--=
" Manage bundled plugins via Vim Plug for consolidated management within this file

call plug#begin('~/.vim/plugged')

" Editing
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-endwise'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ddollar/nerdcommenter'
Plug 'ervandew/supertab'
Plug 'tsaleh/vim-align'
" Plug 'scrooloose/syntastic'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
" Plug 'mattn/gist-vim'
" Plug 'vim-scripts/searchfold.vim'
Plug 'bkad/CamelCaseMotion'
Plug 'chrisbra/vim-diff-enhanced'

" UI Additions
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-scripts/spacehi.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'

" Search & Files
Plug 'mileszs/ack.vim'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'sjl/gundo.vim'

" Languages
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'timcharper/textile.vim'
Plug 'pangloss/vim-javascript'
Plug 'ajf/puppet-vim'
" Plug 'bdd/vim-scala'
Plug 'tpope/vim-markdown'

" Themes
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'altercation/vim-colors-solarized'

" load the plugin and indent settings for the detected filetype
call plug#end()
filetype plugin indent on " required!


" =--------------------------------------------------------------------------= Airline Settings =--=

let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
      let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
  let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline_theme = 'molokai'


" =--------------------------------------------------------------------------= General Settings =--=

if has("autocmd")
	autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Get rid of the space-wasting toolbar in MacVim
if has("gui_running")
	set guioptions=-t
endif

set number                     " Enable line numbers
set scrolloff=4                " Ensure at least 4 lines are visible above and below the cursor position
set ruler
set encoding=utf-8
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set showcmd                    " Show (partial) command in the status line

syntax on

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" =------------------------------------------------------------------= Core Whitespace Settings =--=

set autoindent    "
set smartindent   "
set smarttab      "
set shiftwidth=2  " Tabs are two columns wide
set softtabstop=2 " Ditto
set tabstop=2     " Ditto
set expandtab     "
set textwidth=100 " I like long lines and no other coder can deny.
set nowrap        " But not be default.

" Highlight spaces at the end of the line except in help files
if has("autocmd")
	autocmd BufNewFile,BufReadPost,FilterReadPost,FileReadPost,Syntax * SpaceHi
	au FileType help NoSpaceHi
endif

" ----------------------------------------------------------------------------------= Searching =--=

set hlsearch   " Highlight search results
set incsearch  " Find the next search as we type
set ignorecase " Ignore case in searches
set smartcase  " Be smart about case

" Press escape to clear search
" http://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
nnoremap <silent><esc><esc> :nohlsearch<CR>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" Search for the word under the cursor without moving the cursor
" http://superuser.com/questions/255024/vim-highlighting-a-search-term-without-moving-the-cursor
map <Leader>* :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<C-M>
map <Leader>g* :let @/ = expand('<cword>')\|set hlsearch<C-M>

" =---------------------------------------------------------------------------= Persistent Undo =--=
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" Remember last location in file
if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
		\| exe "normal g'\"" | endif
endif

" =------------------------------------------------------------------------------= Code Folding =--=

set foldmethod=indent   " Fold based on indent
set foldnestmax=3       " Deepest fold is 3 levels
set nofoldenable        " Dont fold by default

if has("autocmd")
	" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
	au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

	" md, markdown, and mk are markdown and define buffer-local preview
	au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

	" add json syntax highlighting
	au BufNewFile,BufRead *.json set ft=javascript

	au BufRead,BufNewFile *.txt call s:setupWrapping()
endif

" autocmd FileType ruby setlocal ts=2 sts=2 sw=2 noexpandtab

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>te
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" w!! to write a file as sudo
" Stolen from Yan Pritzker (skwp), who stole it from Steve Losh
cmap w!! w !sudo tee % >/dev/null

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
color Tomorrow-Night-Bright

" Set column marker for long lines. I like 100 cols.
highlight OverLength ctermbg=darkgray ctermfg=white guibg=#2d2d2d
highlight ColorColumn ctermbg=darkgray ctermfg=white guibg=#2d2d2d
match OverLength /\%>101v.\+/
set colorcolumn=101

" Line Highlighting
set cursorline
" highlight CursorLine guibg=#3d3d3d

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

function! s:setupWrapping()
	set wrap
	set wrapmargin=2
	set textwidth=100
endfunction

function! s:setupMarkup()
	call s:setupWrapping()
	map <buffer> <Leader>p :Hammer<CR>
endfunction

" =--------------------------------------------------------------------------------= Pasteboard =--=
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" =---------------------------------------------------------------------------= MacVIM Behavior =--=
" MacVIM shift+arrow-keys behavior (required in .vimrc)
" http://enethrie.com/2011/06/16/use-set-selectmode-to-disable-select-mode-in-vim-2

" Act Like Mac OS
" let macvim_hig_shift_movement = 1

" Act like Vim
set selectmode=

" % to bounce from do to end etc.
runtime! macros/matchit.vim

if has("gui_running")
	" Automatically resize splits when resizing MacVim window
	autocmd VimResized * wincmd =
endif

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>

" =---------------------------------------------------------------------------= Plugin Settings =--=
" Load individual files for each plugin or customization that should not be in
" this general configuration file.

for f in split(glob('~/.vim/plugin/settings/*.vim'), '\n')
	exe 'source' f
endfor
